// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  created_at        Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String?
  emailToken    String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Comment       Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// / 
model Comment {
  id           Int      @id @unique @default(autoincrement())
  imdb_code    String   @unique
  comment_text String?
  userId       String
  created_at   DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Movies {
  id         String @id @default(cuid())
  imdb_code  String @unique
  movie_path String
  size       Int
  downloaded Int
  date       String
}

model Movie {
  id                        Int          @id @unique
  url                       String?
  imdb_code                 String       @unique
  title                     String
  title_english             String?
  title_long                String?
  slug                      String?
  year                      Int?
  rating                    Float?
  runtime                   Float?
  summary                   String?
  description_full          String?
  synopsis                  String?
  yt_trailer_code           String?
  language                  String?
  mpa_rating                String?
  background_image          String?
  background_image_original String?
  small_cover_image         String?
  medium_cover_image        String?
  large_cover_image         String?
  state                     String?
  date_uploaded             String?
  date_uploaded_unix        Int?
  torrent                   Torrent[]
  genre                     MovieGenre[]
  num_of_votes              Int?
}

model Genre {
  id    Int          @id @unique @default(autoincrement())
  name  String       @unique
  genre MovieGenre[]
}

model MovieGenre {
  id        Int    @id @unique @default(autoincrement())
  genreName String
  movieId   Int
  genre     Genre  @relation(fields: [genreName], references: [name], onDelete: Cascade)
  movie     Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)
}

model Torrent {
  id                 Int     @id @unique @default(autoincrement())
  url                String
  hash               String
  quality            String
  type               String?
  seeds              Int
  peers              Int
  size_bytes         BigInt
  size               String
  date_uploaded      String
  date_uploaded_unix String
  movieId            Int
  movie              Movie   @relation(fields: [movieId], references: [id], onDelete: Cascade)
  downloaded         Int?
}

model Subtitles {
  id        String @id @default(cuid())
  imdb_code String
  language  String
  path      String
}

model WatchedMovies {
  id      String   @id @default(cuid())
  user_id String   @unique
  movies  String[]
}
